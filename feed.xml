<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yangyu's Notes</title>
    <description>This is the ideas from Yangyu Song.
</description>
    <link>https://songyangyu.com/</link>
    <atom:link href="https://songyangyu.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 02 Oct 2021 18:50:19 +0800</pubDate>
    <lastBuildDate>Sat, 02 Oct 2021 18:50:19 +0800</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>Transform Any Website into Desktop App via Electron, in Ubuntu</title>
        <description>&lt;h1 id=&quot;end-result&quot;&gt;End Result&lt;/h1&gt;

&lt;p&gt;How it looks (in Ubuntu) in Startup Menu:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer/electron-apps-ubuntu.png&quot; alt=&quot;Electron Apps in Ubuntu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How it looks when opened as an App (electron-apps-ubuntu.png)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer/electron-feedly-open.png&quot; alt=&quot;Electron Feedly App&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;

&lt;p&gt;I recently started using a Ubuntu Desktop. However, quite a few apps are missing in Ubuntu.&lt;/p&gt;

&lt;p&gt;Therefore, I have to use their web version.&lt;/p&gt;

&lt;h1 id=&quot;tools&quot;&gt;Tools&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;ElectronJS: &lt;a href=&quot;https://www.electronjs.org/&quot;&gt;https://www.electronjs.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Unity Launchers And Desktop Files: &lt;a href=&quot;https://help.ubuntu.com/community/UnityLaunchersAndDesktopFiles&quot;&gt;https://help.ubuntu.com/community/UnityLaunchersAndDesktopFiles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-to-setup&quot;&gt;How to Setup&lt;/h1&gt;

&lt;h2 id=&quot;install-electron-globally&quot;&gt;Install Electron Globally&lt;/h2&gt;

&lt;p&gt;Electron runs chrome internally, but we can run it like a desktop app. ()&lt;/p&gt;

&lt;p&gt;Firstly, you need to make sure that you have electron installed globally. For my case (I use yarn), I do:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn global add electron
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then make sure that it’s in your path. For my case, it’s:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ which electron
/home/songyy/.yarn/bin/electron
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-electron-executable-folder&quot;&gt;Create Electron Executable Folder&lt;/h2&gt;

&lt;p&gt;Let’s take Feedly(&lt;a href=&quot;https://feedly.com/&quot;&gt;https://feedly.com/&lt;/a&gt;) for example.&lt;/p&gt;

&lt;h3 id=&quot;create-folder&quot;&gt;Create Folder&lt;/h3&gt;

&lt;p&gt;Create a separate folder, let’s call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feedly&lt;/code&gt;. Let’s say we created the app in path 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/songyy/fast/desktop-apps/feedly&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;create-js-file&quot;&gt;Create JS File&lt;/h3&gt;

&lt;p&gt;Then, create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file within this folder:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;use strict&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BrowserWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;electron&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BrowserWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;webPreferences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://www.feedly.com/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;whenReady&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;depends on what your target webapp is, you might want to put the URL in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;win.loadURL&lt;/code&gt; differently.&lt;/p&gt;

&lt;h3 id=&quot;run-it-with-electron&quot;&gt;Run it with Electron&lt;/h3&gt;

&lt;p&gt;in the folder where you’ve created the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file, run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;electron &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The electron app would run without problem, loading the target website&lt;/p&gt;

&lt;h1 id=&quot;create-a-desktop-launcher&quot;&gt;Create a Desktop Launcher&lt;/h1&gt;

&lt;h2 id=&quot;make-sure-launcher-folder-exist&quot;&gt;Make Sure Launcher Folder Exist&lt;/h2&gt;

&lt;p&gt;In Ubuntu, a desktop launcher is defined via a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.desktop&lt;/code&gt; file. A good location is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.local/share/applications/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If this location doesn’t exist in your Ubuntu machine, you can create it via:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/.local/share/applications/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;find-a-good-icon&quot;&gt;Find a good Icon&lt;/h2&gt;

&lt;p&gt;You need to find a good icon for the Desktop App, so that it’s easy to identify the App. For the case of Feedly, you can
simply search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feedly icon png&lt;/code&gt;, and you’ll be able to find some good result.&lt;/p&gt;

&lt;p&gt;Copy this file into your feedly folder for the Electron execution. For my case, it’s in path&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/songyy/fast/desktop-apps/feedly/icon.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-desktop-launcher&quot;&gt;Create Desktop Launcher&lt;/h2&gt;

&lt;p&gt;After that, create the desktop file in the launcher folder:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/.local/share/applications/Feedly.desktop
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Desktop Entry]
&lt;span class=&quot;nv&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.1
&lt;span class=&quot;nv&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Feedly
&lt;span class=&quot;nv&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Feedly Website
&lt;span class=&quot;nv&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/songyy/.yarn/bin/electron /home/songyy/fast/desktop-apps/feedly
&lt;span class=&quot;nv&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/songyy/fast/desktop-apps/feedly/icon.png
&lt;span class=&quot;nv&quot;&gt;Terminal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Application
&lt;span class=&quot;nv&quot;&gt;Categories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Utility&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;Application&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that you need to change accordingly, under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exec&lt;/code&gt; part&lt;/p&gt;

&lt;h1 id=&quot;all-done&quot;&gt;All Done&lt;/h1&gt;

&lt;p&gt;Congrats, now you have an super light-weighted desktop app for the web app now.&lt;/p&gt;

</description>
        <pubDate>Fri, 12 Jun 2020 00:00:00 +0800</pubDate>
        <link>https://songyangyu.com/posts/transform-any-website-into-desktop-app-via-electron.html</link>
        <guid isPermaLink="true">https://songyangyu.com/posts/transform-any-website-into-desktop-app-via-electron.html</guid>
        
        <category>front-page</category>
        
        
        <category>superuser</category>
        
      </item>
    
      <item>
        <title>Product Sense, and Upgraded Definition of Done</title>
        <description>&lt;h2 id=&quot;situation&quot;&gt;Situation&lt;/h2&gt;

&lt;p&gt;I’ve had lots of ideas in the past… In fact, my Github repo has 107 projects
(part of them are forked from external source).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/github-repo-screenshot.png&quot; alt=&quot;Github Repo Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, the sad truth is… non of them is a well-maintained, presentable &amp;amp;
fully-usable product. In fact, this blog which I’m currently writing, is
probably the most presentable product I’ve had.&lt;/p&gt;

&lt;h2 id=&quot;conflict&quot;&gt;Conflict&lt;/h2&gt;

&lt;p&gt;When something isn’t maintained properly, and not actively used, it’s as bad as
never existed – expect that I, as the author of the code, have a vague piece of
memory that I was working on it previously – however, with 100+ repo I have in
github, I’m sure that I cannot remember all of them.&lt;/p&gt;

&lt;h2 id=&quot;question&quot;&gt;Question&lt;/h2&gt;

&lt;p&gt;So… how to make sure my time is well spent? How to make sure that.. after
working on some project, I can actually leave a legacy – some good influence to
make our world a better place?&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;I need to keep a product sense.. it has the following aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;record the important things. I think this blog is one of the good way to do
the recording publically. For the confidential ones, I can write it in:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;my personal project, &lt;a href=&quot;https://bamboo-life.herokuapp.com/&quot;&gt;bamboo-life&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;company’s internal wiki page&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;upgraded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;definition of done&lt;/code&gt;: task is actually done, when there is some good
presentable result. Otherwise, it’s just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abondoned&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Done is better than Perfect&lt;/code&gt;. That means, I need to continuously deliver the
presentable (and probably, intermediate) result to get milestones&lt;/li&gt;
  &lt;li&gt;Focus on deliverable / Hackathon Mindset.
    &lt;ul&gt;
      &lt;li&gt;when I start to work on something, I tends to find “best practices”. However, these are extra works which makes
completing a task further away from me.&lt;/li&gt;
      &lt;li&gt;I should focus on the actual deliverable, on the original goal: what I initially want to achieve. Doing things in 
right right approach, but not completing the task, is indeed a wrong approach.&lt;/li&gt;
      &lt;li&gt;the Hackathon Mindset is correct: in a certain period of time, focus on one thing only, trying to produce a 
presentable product. When I cannot produce the actual result, at least show the mock-ups&lt;/li&gt;
      &lt;li&gt;what’s actually presentable is more important than a perfect backend. If I build a perfectly stable &amp;amp; scalable 
backend, but nobody actually use it – it means nothing. Because what I have built would never get used&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 12 Jan 2020 00:00:00 +0800</pubDate>
        <link>https://songyangyu.com/posts/product-sense.html</link>
        <guid isPermaLink="true">https://songyangyu.com/posts/product-sense.html</guid>
        
        <category>front-page</category>
        
        
        <category>methodology</category>
        
      </item>
    
      <item>
        <title>Separation of Concern</title>
        <description>&lt;h2 id=&quot;situation&quot;&gt;Situation&lt;/h2&gt;

&lt;p&gt;When working in big companies like Grab, lots of times I’m just solving some simple CRUD.&lt;/p&gt;

&lt;p&gt;Meanwhile, lots of my time needed to be spent upon different other things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;make and review pull request&lt;/li&gt;
  &lt;li&gt;deployment&lt;/li&gt;
  &lt;li&gt;fixing failures for functional test and unit test&lt;/li&gt;
  &lt;li&gt;load testing&lt;/li&gt;
  &lt;li&gt;integrated with the logging library&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;Turns out, there’re also other teams, solving the same problem again and again. This pattern has several issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reinventing the wheel: multiple teams solving the same issue, is a waste of engineering resource&lt;/li&gt;
  &lt;li&gt;no standard practices: each team has their own opinion, and this opinion highly depends on the one who implemented it.
Different implementation may ends up with different problems&lt;/li&gt;
  &lt;li&gt;incomplete solution: teams are busy implementing business requirements, and the adoption of those best practices would
give time to the actual business need&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Ideally, a business-logic developer only needs to care about the business logic. The best practices should be taken care
by a team of engineering excellence people – define the patterns, the processes, the monitoring dashboards, and the 
basic engineering tools.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Heroku&lt;/code&gt; is one of such example: they handle the CI/CD, monitoring, auto-scaling, infra-upgrade for you, and you only 
need to care about the pure business logic (while… still with some basic configuration to tell the tool on what you 
need). By doing so, a basic level of &lt;strong&gt;separation of concern&lt;/strong&gt; is achieved.&lt;/p&gt;

&lt;h2 id=&quot;potential-issues&quot;&gt;Potential Issues&lt;/h2&gt;

&lt;p&gt;People often has different opinions, and opinions are usually subjective.&lt;/p&gt;

&lt;p&gt;Therefore, what’s accepted by one might not be
accepted by another. To make best practices acceptable, those patterns needs to be so obviously-good, so that it can 
becomes not only the &lt;strong&gt;best&lt;/strong&gt; practices, but also the &lt;strong&gt;common&lt;/strong&gt; practices; in the end, it would become the &lt;strong&gt;only&lt;/strong&gt; practices.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Jan 2020 00:00:00 +0800</pubDate>
        <link>https://songyangyu.com/posts/separation-of-concern.html</link>
        <guid isPermaLink="true">https://songyangyu.com/posts/separation-of-concern.html</guid>
        
        <category>front-page</category>
        
        <category>featured</category>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Provide Sufficient Context in the Merge Request</title>
        <description>&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;When creating a merge request, we need to include more context information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;describe what you’re trying to achieve in this MR&lt;/li&gt;
  &lt;li&gt;why such change is needed&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-context-information&quot;&gt;What is Context Information&lt;/h1&gt;
&lt;p&gt;A pain point of reviewing a merge request, is to understand the context. The context includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;what the merge request actually intends to do&lt;/li&gt;
  &lt;li&gt;why such changes are needed&lt;/li&gt;
  &lt;li&gt;are there any other alternatives&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;no-context-is-bad-for-reviewer&quot;&gt;No Context is bad for Reviewer&lt;/h1&gt;

&lt;p&gt;These context should be communicated properly, so that the reviewer can actually have a clue to justify if the change is necessary &amp;amp; sufficient. Otherwise, the reviewer would have to eye-balling each change, and try to guess why such changes are needed - this is time consuming. With these cognitive overheads, reviewer would tends to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;slower the review process.. because we don’t like to do hard things first&lt;/li&gt;
  &lt;li&gt;blindly say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yes&lt;/code&gt;, because it’s easier&lt;/li&gt;
  &lt;li&gt;focus on syntax, rather than (structural) design decisions - because it’s also easier, and doesn’t needs a complete understanding of the story&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;with such things happens, it’s kind-of defeat the purpose of peer-review: slower review would slow down the development, and syntax kind of comments should be made by automation.&lt;/p&gt;

&lt;h1 id=&quot;sample-template&quot;&gt;Sample Template&lt;/h1&gt;
&lt;p&gt;Ideally, a proper merge request should describe the context listed above. :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;What's this about
=================
- What change this Merge Request makes
- append a Jira Ticket ID (in the MR title)
  
  
Why I do it
=================
- Why do you need to make such change?
- If you're fixing an issue, what's the cause of issue?
- If have, what other alternatives have I considered?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 24 Dec 2019 00:00:00 +0800</pubDate>
        <link>https://songyangyu.com/posts/provide-sufficient-context-in-mr.html</link>
        <guid isPermaLink="true">https://songyangyu.com/posts/provide-sufficient-context-in-mr.html</guid>
        
        <category>front-page</category>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Kubernete Notes</title>
        <description>&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;p&gt;Assume the following steps are done in the folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./kubernetes&lt;/code&gt;, with the
needed YAML files in the folder&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;create secret:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create secret generic db-user-pass --from-literal=password=mysecretpass
kubectl create secret generic db-user --from-literal=username=postgres
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;deploy configmap:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create -f db-configmap.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;deploy db-service:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create -f db-service.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;deploy redis:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create -f redis.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;create secret-key-base:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create secret generic secret-key-base --from-literal=secret-key-base=your-desired-key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;run the setup pod&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create -f setup.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;run the rails pod&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create -f rails.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;run the ingress pod&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# make sure Ingress enabled
minikube addons enable ingress

# then start the ingress
kubectl create -f ingress.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(optional) the sidekiq pod&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create -f sidekiq.yaml # note that I didn't do this locally
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;Blog Post:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.cosmocloud.co/rails-on-kubernetes-part-2/&quot;&gt;Rails on Kubernetes&lt;/a&gt;:
it describes what’s needed clearly. Here’s what it describes:
    &lt;ul&gt;
      &lt;li&gt;Postgres: the DB service, which is composed of
        &lt;ul&gt;
          &lt;li&gt;Service: ingress -&amp;gt; pods, default to use ClusterIP&lt;/li&gt;
          &lt;li&gt;Secret: stores sensitive information&lt;/li&gt;
          &lt;li&gt;Persistent Volume (PV): persistent disk space, cuz pod is ephemeral&lt;/li&gt;
          &lt;li&gt;Persistent Volume Claim (PVC): binds resource to Pod&lt;/li&gt;
          &lt;li&gt;Replication Controller (RC): controls lifecycle of Pod&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Redis: the Cache&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;comamnds&quot;&gt;Comamnds&lt;/h2&gt;

&lt;p&gt;Here I take note of some Kubernetes commands:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# get all resources, including all namespace
kubectl get all --namespace

## About Pods ##
# query pods with list of labels
kubectl get pods -l environment=production,tier=frontend
#
# watch pod status, live
kubectl get pods -w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 26 Oct 2018 00:00:00 +0800</pubDate>
        <link>https://songyangyu.com/posts/kubernete-notes.html</link>
        <guid isPermaLink="true">https://songyangyu.com/posts/kubernete-notes.html</guid>
        
        <category>devops</category>
        
        
        <category>notes</category>
        
      </item>
    
      <item>
        <title>Testing Result not Detail</title>
        <description>&lt;p&gt;When writing specs, I think the spec should describe implementation result, but 
not the implementation detail.&lt;/p&gt;

&lt;p&gt;Take the ruby code below for example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;one can test like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;that’s testing the result; but if one write test:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;that’s testing the detail.&lt;/p&gt;

&lt;p&gt;The problem with testing the detail is that… say if the dependent method, 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:+&lt;/code&gt; got changed, then the result would actually be different, but the second 
spec would still pass.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Sep 2018 00:00:00 +0800</pubDate>
        <link>https://songyangyu.com/posts/testing-result-not-detail.html</link>
        <guid isPermaLink="true">https://songyangyu.com/posts/testing-result-not-detail.html</guid>
        
        <category>front-page</category>
        
        
        <category>code-structure</category>
        
      </item>
    
      <item>
        <title>CSRF protection in Rails</title>
        <description>&lt;p&gt;&lt;a href=&quot;&amp;quot;https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)&amp;quot;&quot;&gt;CSRF(Cross Site Request Forgery) is an attack that forces an end user to
execute unwanted actions on a web application in which he/she is currently
authenticated.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, I’ll explore, in the source code level, how Rails protect itself
from CSRF. It has two checks: based on token, and also the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;We’ll first look at how rails put the token into the page, then see how the
token is checked.&lt;/p&gt;

&lt;h2 id=&quot;include-token-in-page&quot;&gt;Include Token in Page&lt;/h2&gt;

&lt;p&gt;There’re two places to insert token in page: meta tag, and form.&lt;/p&gt;

&lt;h3 id=&quot;token-in-meta-tag&quot;&gt;Token in Meta Tag&lt;/h3&gt;

&lt;h4 id=&quot;genreral-view&quot;&gt;Genreral View&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;app/views/layouts/application.html.erb#L5&quot;&gt;application.html.erb&lt;/a&gt;: the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;csrf_meta_tags&lt;/code&gt; would load CSRF token into the current web page:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/form-show-csrf-token-screen.png&quot; alt=&quot;Token in Header&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;actionview/lib/action_view/helpers/csrf_helper.rb#13&quot;&gt;csrf_meta_tags&lt;/a&gt; would call 
&lt;a href=&quot;actionpack/lib/action_controller/metal/request_forgery_protection.rb#284&quot;&gt;form_authenticity_token&lt;/a&gt; to generate the 
corresponding token, here’s the logic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;in application.html.erb:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-erbruby&quot;&gt;    &amp;lt;head&amp;gt;
      &amp;lt;title&amp;gt;RailsCsrfDefense&amp;lt;/title&amp;gt;
      &amp;lt;%= csrf_meta_tags %&amp;gt;
      ... ...
    &amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;internal&quot;&gt;Internal&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;in rails/actionview/lib/action_view/helpers/csrf_helper.rb:13&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;csrf_meta_tags&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protect_against_forgery?&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'meta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'csrf-param'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request_forgery_protection_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'meta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'csrf-token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form_authenticity_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html_safe&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;in rails/actionpack/lib/action_controller/metal/request_forgery_protection.rb:284&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;# Sets the token value for the current session.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;form_authenticity_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;form_options: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;masked_authenticity_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;form_options: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Creates a masked version of the authenticity token that varies&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# on each request. The masking is used to mitigate SSL attacks&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# like BREACH.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;masked_authenticity_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;form_options: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;values_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;raw_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per_form_csrf_tokens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;action_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalize_action_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;per_form_csrf_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;real_csrf_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;one_time_pad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SecureRandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AUTHENTICITY_TOKEN_LENGTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;encrypted_csrf_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xor_byte_strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one_time_pad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;masked_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_time_pad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_csrf_token&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strict_encode64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;masked_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;real_csrf_token&lt;/code&gt; would generate token randomly, and stored in the current session:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;in rails/actionpack/lib/action_controller/metal/request_forgery_protection.rb:367&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;real_csrf_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:_csrf_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SecureRandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AUTHENTICITY_TOKEN_LENGTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strict_decode64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:_csrf_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because it is stored in the session, it doesn’t change over time. This might leads to a “reply attack”: sniff the
network traffic, get the token, reply the attack.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one_time_pad&lt;/code&gt; is generated to mask the token, to overcome the &lt;a href=&quot;https://www.youtube.com/watch?v=T4iTwNLPv4g&quot;&gt;breach attack&lt;/a&gt;,
which relies on some reflected content from the original request to guess the HTTPS secret.&lt;/p&gt;

&lt;h3 id=&quot;token-in-the-form&quot;&gt;Token in the form&lt;/h3&gt;

&lt;p&gt;Further more, as we can see in the picture above, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authenticity_token&lt;/code&gt; is also included in each form, with the same
value as the one in the header.&lt;/p&gt;

&lt;h4 id=&quot;general-view&quot;&gt;General View&lt;/h4&gt;

&lt;p&gt;By default, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;form_for&lt;/code&gt; method would use the same token as the one in meta-tag:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;in actionview/lib/action_view/helpers/form_helper.rb:428&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;form_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ... ...&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# ... ...&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:authenticity_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:authenticity_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      
      &lt;span class=&quot;c1&quot;&gt;# ... ...&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;form_tag_with_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to implement your own form-based CSRF protection, or you want this form to submit to an external URL, 
you can pass in a token which is generated by you:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-erbruby&quot;&gt;&amp;lt;%= form_for @invoice, url: external_url, authenticity_token: 'external_token' do |f| %&amp;gt;
   ...
 &amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can also put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authenticity_token: false&lt;/code&gt; if you don’t want the token.&lt;/p&gt;

&lt;h4 id=&quot;internal-1&quot;&gt;Internal&lt;/h4&gt;

&lt;p&gt;Internally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;form_for&lt;/code&gt; would call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;form_tag_with_body&lt;/code&gt;, which would further call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;form_tag_html&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;in actionview/lib/action_view/helpers/form_tag_helper.rb:890&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;form_tag_with_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form_tag_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;safe_concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/form&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;form_tag_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;extra_tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra_tags_for_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra_tags&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The actual authenticity_token would be include in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extra_tags_for_form&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;in actionview/lib/action_view/helpers/form_tag_helper.rb:856&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extra_tags_for_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;authenticity_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;authenticity_token&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;method_tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'get'&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;get&quot;&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;post&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;token_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticity_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;form_options: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;action: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;method: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;post&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;post&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;method_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticity_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;form_options: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;action: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;method: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we can see, the actual authenticity_token would be include for any HTTP method other than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;. (i.e.: POST / PATCH / PUT / DELETE)&lt;/p&gt;

&lt;p&gt;Last but not least, the actual token would be generated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;form_authenticity_token&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token_tag&lt;/code&gt; method, which is
also used by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;csrf_meta_tags&lt;/code&gt; method.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;in actionview/lib/action_view/helpers/url_helper.rb:589&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;token_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;form_options: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protect_against_forgery?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form_authenticity_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;form_options: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_forgery_protection_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;token-validation&quot;&gt;Token Validation&lt;/h2&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;In the controller, call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protect_from_forgery&lt;/code&gt; with settings, where settings can be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:exception&lt;/code&gt; - Raises ActionController::InvalidAuthenticityToken exception.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:reset_session&lt;/code&gt; - Resets the session.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:null_session&lt;/code&gt; - Provides an empty session during request but doesn’t reset it completely. Used as default if &lt;tt&gt;:with&lt;/tt&gt; option is not specified.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;internel&quot;&gt;Internel&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;in actionpack/lib/action_controller/metal/request_forgery_protection.rb:122&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;protect_from_forgery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse_merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;prepend: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forgery_protection_strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protection_method_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:null_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;request_forgery_protection_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:authenticity_token&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_authenticity_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;append_after_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_same_origin_request&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protect_from_forgery&lt;/code&gt; would add the following filters into the controller:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;verify_authenticity_token&lt;/li&gt;
  &lt;li&gt;verify_same_origin_request&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;verify_authenticity_token&quot;&gt;verify_authenticity_token&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;in actionpack/lib/action_controller/metal/request_forgery_protection.rb:211&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;verify_authenticity_token&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# no need to verify if it is GET request&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mark_for_same_origin_verification!&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verified_request?&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_warning_on_csrf_failure&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Can't verify CSRF token authenticity.&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;handle_unverified_request&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Line 266&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;verified_request?&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protect_against_forgery?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;head?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valid_request_origin?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any_authenticity_token_valid?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Line 399&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;valid_request_origin?&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forgery_protection_origin_check&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# We accept blank origin headers because some user agents don't send it.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;base_url&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Line 272&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;any_authenticity_token_valid?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;request_authenticity_tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;valid_authenticity_token?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
  
    &lt;span class=&quot;c1&quot;&gt;# Line 308&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Checks the client's masked token to see if it matches the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# session token. Essentially the inverse of&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# +masked_authenticity_token+.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;valid_authenticity_token?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_masked_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_masked_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_masked_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoded_masked_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;masked_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strict_decode64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoded_masked_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# encoded_masked_token is invalid Base64&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# See if it's actually a masked token or not. In order to&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# deploy this code, we should be able to handle any unmasked&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# tokens that we've issued without error.&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;masked_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AUTHENTICITY_TOKEN_LENGTH&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# This is actually an unmasked token. This is expected if&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# you have just upgraded to masked tokens, but should stop&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# happening shortly after installing this gem&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compare_with_real_token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;masked_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;masked_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AUTHENTICITY_TOKEN_LENGTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;csrf_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unmask_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;masked_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;compare_with_real_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csrf_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;valid_per_form_csrf_token?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csrf_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Token is malformed&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Line 350&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare_with_real_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SecurityUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;secure_compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real_csrf_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The chunk of code above is how Rails validate CSRF token:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;token is stored in the session, which is provided by the client side&lt;/li&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify_authenticity_token&lt;/code&gt; would check, for the non-GET and non-HEAD method, 2 things:&lt;/li&gt;
  &lt;li&gt;if the origin matches&lt;/li&gt;
  &lt;li&gt;if the token matches&lt;/li&gt;
  &lt;li&gt;token can be passed in 2 places:&lt;/li&gt;
  &lt;li&gt;from form data&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;from HTTP header (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify_authenticity_token&lt;/code&gt;)&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;# actionpack/lib/action_controller/metal/request_forgery_protection.rb:280&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;request_authenticity_tokens&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form_authenticity_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x_csrf_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;verify_same_origin_request&quot;&gt;verify_same_origin_request&lt;/h4&gt;

&lt;p&gt;After the page is rendered, another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify_same_origin_request&lt;/code&gt; verification would be done. This is only done upon the
GET request.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;in actionpack/lib/action_controller/metal/request_forgery_protection.rb:236&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;verify_same_origin_request&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marked_for_same_origin_verification?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non_xhr_javascript_response?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CROSS_ORIGIN_JAVASCRIPT_WARNING&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;InvalidCrossOriginRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CROSS_ORIGIN_JAVASCRIPT_WARNING&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Line 255&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Check for cross-origin JavaScript responses.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;non_xhr_javascript_response?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;%r(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\A&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;text/javascript)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xhr?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;marked_for_same_origin_verification?&lt;/code&gt; would only be marked when it’s a GET request, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non_xhr_javascript_response?&lt;/code&gt;
would check check if the response type is javascript, and the request is non-XHR. It usually means JSONP request.&lt;/p&gt;

&lt;p&gt;I think Rails discoverage the use of JSONP request, because it has potential issue of 
&lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP#Cross-site_request_forgery&quot;&gt;CSRF&lt;/a&gt;.
An example endpoint is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/books/jsonp&lt;/code&gt; – it’s serving a JSONP endpoint, and blocked by Rails by default.&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Apr 2017 00:00:00 +0800</pubDate>
        <link>https://songyangyu.com/posts/csrf-protection-in-rails.html</link>
        <guid isPermaLink="true">https://songyangyu.com/posts/csrf-protection-in-rails.html</guid>
        
        <category>front-page</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>未来的样子 - 关于技能</title>
        <description>&lt;h2 id=&quot;思考未来趋势的意义&quot;&gt;思考未来趋势的意义&lt;/h2&gt;
&lt;p&gt;根据“站在风口上，猪都能飞起来”的指导，学的新技能，要联系未来的发展，这样才能让自己的能力，发挥出更大的价值。如果把自己的技能认为是一个产品，那么自己培养技能的过程，就是制造这个产品的过程。如此看来，产品要非常符合市场需要，最好是“卖缺”，才能卖得好价钱。&lt;/p&gt;

&lt;h2 id=&quot;技能与-金钱--价值&quot;&gt;技能与 金钱 / 价值&lt;/h2&gt;
&lt;p&gt;“估值”和“价值”是来自李笑来的两个概念。重温一下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;价值：一个人实际创造的价值；这个人对于世界的价值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;估值：一个人的收益。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;价值和估值是不相等的；高估值会造成这个人“心慌”——因为无法产生与之匹配的价值。但长期来看，价值会是估值的一个锚点，估值会趋向于价值。&lt;/p&gt;

&lt;p&gt;提升技能的意义，在于提升自己对于世界的价值。&lt;/p&gt;

&lt;h2 id=&quot;技能掌握与否的判断标准&quot;&gt;技能掌握与否的判断标准&lt;/h2&gt;
&lt;p&gt;所谓“世事洞明皆学问，人情练达即文章”。一方面，只要留心，勤思考，那么一切都是对于自我某一方面技能的提升（从而可以转变为，自己内在价值的提升）；然而，像我这样浮躁的人，会倾向于做很多事情，然后时候都忘记干净了。&lt;/p&gt;

&lt;p&gt;比如“好读书，不求甚解”。我们知道，与其自己亲自去经历一件事情，听取别人的经历和分析，会来得更快一些；然而，只是在大脑表层过一遍这种简单的“别人的经历”，他们又能持续多久呢？&lt;/p&gt;

&lt;p&gt;所以需要一个方式来判断。一个很好的方式，就是我CS5234的教授教的：在读完notes之后，去做点别的事情先；然后回来，把整个过程重新推理一遍。看自己在推理环节中，漏掉了什么没。如此往复。&lt;/p&gt;

&lt;p&gt;这不仅对于理科的公式/算法推演有效，对于文科的归纳总结，同样有效。毕竟我们读书，最主要是去学习，人家的思维方式。&lt;/p&gt;

&lt;h2 id=&quot;技能不对称的时效性&quot;&gt;技能不对称的时效性&lt;/h2&gt;
&lt;p&gt;另外注意一点，在当今时代，很多人都有着极强的学习能力。任何新技能，都有大批的新进来的劳动力；如果当下发现缺口，那么这个缺口很快就会被新进来的劳动力补齐。所以可以认为，任何一个领域，一个人的领先地位，可能只有一两年而已（读下来一个master课程的时间）。&lt;/p&gt;

&lt;h2 id=&quot;技能的获得与应用&quot;&gt;技能的获得，与应用&lt;/h2&gt;
&lt;p&gt;世界是动态的。因为技能不对称的时效性，保持自己竞争力的唯一方式，就是持续不断的学习与进步。进步分两块，速度与方向。二者都很重要，但方向的重要性远大于速度。因为我们知道，做出来的产品如果没人买，没产生价值，那么产品的价值也不高嘛。&lt;/p&gt;

&lt;p&gt;同时要注意的是，如何合理判断方向的正确性，是很难得一件事。很多时候人们出于自己的兴趣去学习，到最后变成了“connecting the dots”。Jobs说，做事的时候需要有那种belief，相信“dots will finally be connected someday”。然而我觉得，更多的，是一个人的心态与信念，或者说他的靠谱程度：到最后，技能是为了应用服务的。如此看来，不妨以“目标导向”，学东西到“刚好够用”的地步，并且不断地改进目标。&lt;/p&gt;

&lt;h2 id=&quot;目标导向与过程导向&quot;&gt;目标导向，与过程导向&lt;/h2&gt;
&lt;p&gt;依照这个上面的逻辑，正确的路径是目标导向：选定一个方向，然后塌下心来，去解决这个方向下面的问题。&lt;/p&gt;

&lt;p&gt;与之相对的是“过程导向”：首先觉得自己要了解某个topic下面的内容，于是就去&lt;em&gt;尝试&lt;/em&gt;努力学习这个topic下面的相关内容，以及其衍生内容。我觉得这种方式在今天有点不适用，主要是因为，如果没有以要解决的作为目标，一个长的过程，很难坚持下去。&lt;/p&gt;

&lt;p&gt;但过程导向很适用的一点，是在一个大方向上往前走。人生很长，不能以短短的半年（一门课的程度）就判断在这个领域下面的可能性。当下的表现并不能代表未来的表现。比拼的出了当下的表现之外，还有就是在这个方向上，走了多远。&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Oct 2016 00:00:00 +0800</pubDate>
        <link>https://songyangyu.com/posts/on-future-skill.html</link>
        <guid isPermaLink="true">https://songyangyu.com/posts/on-future-skill.html</guid>
        
        <category>front-page</category>
        
        
        <category>methodology</category>
        
      </item>
    
      <item>
        <title>Run Way</title>
        <description>&lt;p&gt;Last time at &lt;a href=&quot;http://www.reddotrubyconf.com/&quot;&gt;RedDotRubyConf&lt;/a&gt;, when I met the
Jonathan Low, co-founder of &lt;a href=&quot;http://honestbee.com/&quot;&gt;HonestBee&lt;/a&gt;, asking him about
the feeling of doing a start-up.. he said, something like: “It is like going on
a run way. You are racing against other players. You need to reach your 
destination first, before you use up your fuel (funding)”.&lt;/p&gt;

&lt;p&gt;Interesting thoughts, and two important things it has pointed out: competition,
and limited resources (money).&lt;/p&gt;

&lt;p&gt;Meanwhile, each one of us can view ourself as a “startup”. There’s also limited
resource (time).. but the competition part is a bit vague.&lt;/p&gt;

&lt;p&gt;I usually hate to view life as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Zero-sum_game&quot;&gt;zero-sum
game&lt;/a&gt;. Instead, I’d like to believe
that the resources in life can be created. Therefore, there’ll be unlimited
resources, unlimited opportunities. Thinking about life this way would help
reduce the anxiety, and encourage one to exploring more opportunities.&lt;/p&gt;

&lt;p&gt;However.. is it true?&lt;/p&gt;

&lt;p&gt;The truth is.. life is fragile, and time is limited. It’s exactlly like going on
a run way, and you’re burning your time as fuel. There’s no fixed goal, but
there’re certain checkpoints: education, housing, marriage, etc.&lt;/p&gt;

&lt;p&gt;It’s true that life is mostly about experience.. but it’s also true that..
timing is important. Some opportunities come, and if you’re not prepared, it
would be gone (missed the checkpoint). You might be able to reach other
checkpoint.. which is also a good thing.&lt;/p&gt;

&lt;p&gt;But the important thing is to have a clear goal. Wondering around and amortize
your energe would usually means a waste… and the check point, which is harder
to get, would be usually missed.&lt;/p&gt;

&lt;p&gt;Run quick, run fast :)&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Aug 2016 00:00:00 +0800</pubDate>
        <link>https://songyangyu.com/posts/run-way.html</link>
        <guid isPermaLink="true">https://songyangyu.com/posts/run-way.html</guid>
        
        <category>front-page</category>
        
        
        <category>thoughts</category>
        
      </item>
    
      <item>
        <title>on Objective, and Focus</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;One should always reflect upon himself… to keep on the right track, to find
out and correct mistakes, and to the greater self-awareness.&lt;/p&gt;

  &lt;p&gt;– by Myself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;when-reading-what-am-i-reading-about&quot;&gt;When reading, what am I reading about?&lt;/h1&gt;

&lt;p&gt;I have been reading a lot this year. Not only the Tech Specs (which I always
do), but also the blog posts (which I often do), as well as the books (which I
mostly started this year only). To make my statement stronger, here’s &lt;a href=&quot;/books-2016/&quot;&gt;a list of
books I’ve read this Year&lt;/a&gt;.
(I’m recording them down because there’s a line stating “to read more than 50 
books this year” in my new year resolution).&lt;/p&gt;

&lt;p&gt;It seems to be lots of books.. however, I’ve forgot the content of most of them.&lt;/p&gt;

&lt;p&gt;Such kind of feeling also come when I was reading about blog-posts online – the
title interests me, the content interests me, I’ve read each of the word..&lt;/p&gt;

&lt;p&gt;Immediately after I’ve done reading the book, I feel good – yeah, I’ve managed
to complete sth.. and it’s so informative!&lt;/p&gt;

&lt;p&gt;The next day, I’ve forgot most of the information from the post.&lt;/p&gt;

&lt;h1 id=&quot;when-i-do-something-what-am-i-really-doing&quot;&gt;When I do something, what am I really doing?&lt;/h1&gt;

&lt;p&gt;So the question about reading is: when I’m reading a book.. what am I actually
reading?&lt;/p&gt;

&lt;p&gt;In order to answer the question with book is simple: gaining information.
Although some of the information are lost.. I &lt;em&gt;might&lt;/em&gt; still have a shallow
memory about this book.. so that next time when I see similiar things.. at least
I know here to reference to / from.&lt;/p&gt;

&lt;p&gt;However, this question can be generalized to.. things in general:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When I do something, what am I really doing? What am I really going for?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Human is a creator with ability to reason about sth. Therefore, we, as a human,
have &lt;em&gt;motivation&lt;/em&gt; to do certain things, and we do expect a certain outcome.&lt;/p&gt;

&lt;p&gt;The outcome can be like, “I feel good in this short period of time”, “this is
for my long term goal”. It must be something.&lt;/p&gt;

&lt;h1 id=&quot;start-with-why---why-i-do-certain-things--why-certain-things-happened&quot;&gt;Start with why - why I do certain things / why certain things happened&lt;/h1&gt;

&lt;p&gt;So.. are we really know what we’re doing?&lt;/p&gt;

&lt;p&gt;We do things because we want to persue our goal in the long term run.. but why
are we doing such things.. how can it help with the long term goal?&lt;/p&gt;

&lt;p&gt;Do we even know what our long-term goal is?&lt;/p&gt;

&lt;p&gt;I think most of the people might not know what he/she really want to do in
life.. if someone claim that he know.. most likely, his &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;know&lt;/code&gt; is just for that
particular time… it would change as time passes.&lt;/p&gt;

&lt;p&gt;However, there’s a simple techique, which can help building what we want to do.
I call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;starts with why&lt;/code&gt;. It’s based on a simple assumption: things happen,
with a reason. So in order to make sure that we are making the right reasoning..
we need to ask: why such thing happen? Especially.. we need to ask about the
fundamental concepts – something it’s so basic that it is like it has been
progrommed into our mind, so that when we’re doing our reasonings.. we often
skip such steps. Some questions like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why do I need to care about what others think about me?&lt;/li&gt;
  &lt;li&gt;Why do I need to social with other people?&lt;/li&gt;
  &lt;li&gt;Why do I have to earn money?&lt;/li&gt;
  &lt;li&gt;Why do I need to sleep?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Asking why does not mean that we can stop doing something.. but asking why would
help us see things clearly.. so that when we’re making our tradeoffs, we know
what we can afford to lose, and where’s the base line.&lt;/p&gt;

&lt;h1 id=&quot;proactive--reactive&quot;&gt;Proactive / Reactive&lt;/h1&gt;

&lt;p&gt;In the famous book &amp;lt;7 habits of highly effective people&amp;gt;.. it talks about
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proactive&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reactive&lt;/code&gt;. Basically, being proactive means to make your own
decision, to actively carry out your plans, and to act based on long-term goal;
while being &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reactive&lt;/code&gt; means to react based upon external factors – whether,
other people’s reaction, etc.&lt;/p&gt;

&lt;p&gt;Reactive people is actually wasting their brain – one of the key difference
between huamn, and machine, is that human have motivations by heart. It’s easy
for a machine to be reactive – it only need to consider the current state, plus
some simple rules.&lt;/p&gt;

&lt;p&gt;However, we’re all reactive, in certain things.&lt;/p&gt;

&lt;p&gt;See further, be proactive. Start with why.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Aug 2016 00:00:00 +0800</pubDate>
        <link>https://songyangyu.com/posts/on-objective-and-focus.html</link>
        <guid isPermaLink="true">https://songyangyu.com/posts/on-objective-and-focus.html</guid>
        
        <category>front-page</category>
        
        <category>featured</category>
        
        
        <category>thoughts</category>
        
      </item>
    
  </channel>
</rss>
